require('dotenv').config();\nconst fs=require('fs');const os=require('os');const path=require('path');const axios=require('axios');const Pusher=require('pusher-js');const {print}=require('pdf-to-printer');\nconst KEY=process.env.PUSHER_KEY;const CLUSTER=process.env.PUSHER_CLUSTER;const API=process.env.API_BASE;const TOKEN=process.env.SANCTUM_TOKEN||'';\nif(!KEY||!CLUSTER){console.error('Missing PUSHER_KEY/PUSHER_CLUSTER');process.exit(1);}\nconsole.log('[Agent] Starting...');const p=new Pusher(KEY,{cluster:CLUSTER,forceTLS:false});const ch=p.subscribe('print-jobs');\nch.bind('PrintJobCreated',async(ev)=>{try{const d=ev&&ev.printJob?ev.printJob:ev;const job=d.job_id||d.id;const order=d.order_id||d.orderId||d.order_id;const url=${API}/orders//pos-invoice-pdf;console.log([Agent] Received job  for order  );const tmp=path.join(os.tmpdir(),order--.pdf);const res=await axios.get(url,{responseType:'arraybuffer',headers:TOKEN?{Authorization:Bearer }:{}});fs.writeFileSync(tmp,res.data);if(TOKEN&&job){try{await axios.patch(${API}/print-jobs/,{status:'processing'},{headers:{Authorization:Bearer }});}catch(e){}}await print(tmp,{printer:undefined});if(TOKEN&&job){try{await axios.patch(${API}/print-jobs/,{status:'printed'},{headers:{Authorization:Bearer }});}catch(e){}}console.log([Agent] Printed job );}catch(err){console.error('[Agent] Error handling print job:',err?.message||err);}});\nconsole.log('[Agent] Listening for print jobs on channel: print-jobs');
